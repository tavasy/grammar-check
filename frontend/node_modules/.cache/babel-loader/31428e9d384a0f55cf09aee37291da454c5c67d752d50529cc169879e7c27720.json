{"ast":null,"code":"var _jsxFileName = \"/Users/tatiana/Documents/code/grammar-correction-tool/frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport \"./App.css\"; // Import some CSS for positioning\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [text, setText] = useState(\"\"); // Stores the plain text input\n  const [corrections, setCorrections] = useState([]); // Stores corrections from the API\n  const textareaRef = useRef(null); // Reference to the textarea\n\n  const handleTextChange = e => {\n    setText(e.target.value); // Update state with the textarea input\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch(\"http://127.0.0.1:5000/grammar-check\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const result = await response.json();\n    setCorrections(result.matches || []);\n  };\n\n  // Function to generate the underlined issues inside the overlay div\n  const getHighlightedText = () => {\n    if (!corrections || corrections.length === 0) {\n      return text; // No corrections, return plain text\n    }\n    let newText = [];\n    let lastIndex = 0;\n    corrections.forEach((match, index) => {\n      const {\n        offset,\n        length\n      } = match;\n\n      // Add plain text before the correction\n      if (lastIndex < offset) {\n        newText.push(text.slice(lastIndex, offset));\n      }\n\n      // Highlight the text that has a grammatical issue\n      newText.push(/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          textDecoration: \"underline\",\n          color: \"red\"\n        },\n        children: text.slice(offset, offset + length)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this));\n\n      // Move the index after the correction\n      lastIndex = offset + length;\n    });\n\n    // Add any remaining text after the last correction\n    if (lastIndex < text.length) {\n      newText.push(text.slice(lastIndex));\n    }\n    return newText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Grammar Correction Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"textarea-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"highlighted-text\",\n          children: getHighlightedText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textareaRef,\n        value: text,\n        onChange: handleTextChange,\n        placeholder: \"Enter your text here\",\n        rows: \"10\",\n        cols: \"50\",\n        className: \"editable-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Check Grammar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HuhQJeqGFYa+kHpBX8ZgibrUpPM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","App","_s","text","setText","corrections","setCorrections","textareaRef","handleTextChange","e","target","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","result","json","matches","getHighlightedText","length","newText","lastIndex","forEach","match","index","offset","push","slice","style","textDecoration","color","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","ref","onChange","placeholder","rows","cols","type","_c","$RefreshReg$"],"sources":["/Users/tatiana/Documents/code/grammar-correction-tool/frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./App.css\"; // Import some CSS for positioning\n\nfunction App() {\n  const [text, setText] = useState(\"\"); // Stores the plain text input\n  const [corrections, setCorrections] = useState([]); // Stores corrections from the API\n  const textareaRef = useRef(null); // Reference to the textarea\n\n  const handleTextChange = (e) => {\n    setText(e.target.value); // Update state with the textarea input\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const response = await fetch(\"http://127.0.0.1:5000/grammar-check\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ text }),\n    });\n\n    const result = await response.json();\n    setCorrections(result.matches || []);\n  };\n\n  // Function to generate the underlined issues inside the overlay div\n  const getHighlightedText = () => {\n    if (!corrections || corrections.length === 0) {\n      return text; // No corrections, return plain text\n    }\n\n    let newText = [];\n    let lastIndex = 0;\n\n    corrections.forEach((match, index) => {\n      const { offset, length } = match;\n\n      // Add plain text before the correction\n      if (lastIndex < offset) {\n        newText.push(text.slice(lastIndex, offset));\n      }\n\n      // Highlight the text that has a grammatical issue\n      newText.push(\n        <span key={index} style={{ textDecoration: \"underline\", color: \"red\" }}>\n          {text.slice(offset, offset + length)}\n        </span>\n      );\n\n      // Move the index after the correction\n      lastIndex = offset + length;\n    });\n\n    // Add any remaining text after the last correction\n    if (lastIndex < text.length) {\n      newText.push(text.slice(lastIndex));\n    }\n\n    return newText;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Grammar Correction Tool</h1>\n      <form onSubmit={handleSubmit}>\n        {/* Overlay div to display highlighted text */}\n        <div className=\"textarea-overlay\">\n          <div className=\"highlighted-text\">\n            {getHighlightedText()}\n          </div>\n        </div>\n\n        {/* Textarea for typing input */}\n        <textarea\n          ref={textareaRef}\n          value={text}\n          onChange={handleTextChange}\n          placeholder=\"Enter your text here\"\n          rows=\"10\"\n          cols=\"50\"\n          className=\"editable-textarea\"\n        />\n        <br />\n        <button type=\"submit\">Check Grammar</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAMU,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElC,MAAMU,gBAAgB,GAAIC,CAAC,IAAK;IAC9BL,OAAO,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,CAAC,CAAC;IAElB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MAClEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEjB;MAAK,CAAC;IAC/B,CAAC,CAAC;IAEF,MAAMkB,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACpChB,cAAc,CAACe,MAAM,CAACE,OAAO,IAAI,EAAE,CAAC;EACtC,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAACnB,WAAW,IAAIA,WAAW,CAACoB,MAAM,KAAK,CAAC,EAAE;MAC5C,OAAOtB,IAAI,CAAC,CAAC;IACf;IAEA,IAAIuB,OAAO,GAAG,EAAE;IAChB,IAAIC,SAAS,GAAG,CAAC;IAEjBtB,WAAW,CAACuB,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACpC,MAAM;QAAEC,MAAM;QAAEN;MAAO,CAAC,GAAGI,KAAK;;MAEhC;MACA,IAAIF,SAAS,GAAGI,MAAM,EAAE;QACtBL,OAAO,CAACM,IAAI,CAAC7B,IAAI,CAAC8B,KAAK,CAACN,SAAS,EAAEI,MAAM,CAAC,CAAC;MAC7C;;MAEA;MACAL,OAAO,CAACM,IAAI,cACVhC,OAAA;QAAkBkC,KAAK,EAAE;UAAEC,cAAc,EAAE,WAAW;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAC,QAAA,EACpElC,IAAI,CAAC8B,KAAK,CAACF,MAAM,EAAEA,MAAM,GAAGN,MAAM;MAAC,GAD3BK,KAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR,CAAC;;MAED;MACAd,SAAS,GAAGI,MAAM,GAAGN,MAAM;IAC7B,CAAC,CAAC;;IAEF;IACA,IAAIE,SAAS,GAAGxB,IAAI,CAACsB,MAAM,EAAE;MAC3BC,OAAO,CAACM,IAAI,CAAC7B,IAAI,CAAC8B,KAAK,CAACN,SAAS,CAAC,CAAC;IACrC;IAEA,OAAOD,OAAO;EAChB,CAAC;EAED,oBACE1B,OAAA;IAAK0C,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAClBrC,OAAA;MAAAqC,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCzC,OAAA;MAAM2C,QAAQ,EAAE/B,YAAa;MAAAyB,QAAA,gBAE3BrC,OAAA;QAAK0C,SAAS,EAAC,kBAAkB;QAAAL,QAAA,eAC/BrC,OAAA;UAAK0C,SAAS,EAAC,kBAAkB;UAAAL,QAAA,EAC9Bb,kBAAkB,CAAC;QAAC;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNzC,OAAA;QACE4C,GAAG,EAAErC,WAAY;QACjBI,KAAK,EAAER,IAAK;QACZ0C,QAAQ,EAAErC,gBAAiB;QAC3BsC,WAAW,EAAC,sBAAsB;QAClCC,IAAI,EAAC,IAAI;QACTC,IAAI,EAAC,IAAI;QACTN,SAAS,EAAC;MAAmB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eACFzC,OAAA;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNzC,OAAA;QAAQiD,IAAI,EAAC,QAAQ;QAAAZ,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACvC,EAAA,CAtFQD,GAAG;AAAAiD,EAAA,GAAHjD,GAAG;AAwFZ,eAAeA,GAAG;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}