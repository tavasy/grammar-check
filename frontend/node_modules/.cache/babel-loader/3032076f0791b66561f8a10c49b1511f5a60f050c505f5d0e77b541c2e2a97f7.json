{"ast":null,"code":"var _jsxFileName = \"/Users/tatiana/Documents/code/grammar-correction-tool/frontend/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [corrections, setCorrections] = useState(null);\n  const editableDivRef = useRef(null); // To directly manipulate the contentEditable div\n\n  // Handle text changes\n  const handleTextChange = event => {\n    const caretPosition = getCaretPosition(); // Get the caret position\n    const wordIndex = findWordAtCaret(caretPosition); // Find the word at the caret position\n\n    // Remove the underline from the word being edited\n    removeUnderlineForWordAt(wordIndex);\n\n    // Update the text state with the innerText (plain text)\n    setText(event.target.innerText);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch(\"http://127.0.0.1:5000/grammar-check\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const result = await response.json();\n    setCorrections(result.matches || []);\n  };\n  useEffect(() => {\n    if (corrections && corrections.length > 0) {\n      underlineWordsAtOffsets();\n    }\n  }, [corrections]);\n  const underlineWordsAtOffsets = () => {\n    let updatedText = text;\n    let offsetCorrection = 0;\n    corrections.forEach(match => {\n      const {\n        offset,\n        length\n      } = match;\n      const wordToUnderline = text.substring(offset, offset + length);\n\n      // Wrap the word in <u> tag\n      const underlinedWord = `<u>${wordToUnderline}</u>`;\n\n      // Update the text by inserting the <u> tag, considering previously added HTML\n      updatedText = updatedText.slice(0, offset + offsetCorrection) + underlinedWord + updatedText.slice(offset + length + offsetCorrection);\n\n      // Adjust the offset correction based on the added <u> tags\n      offsetCorrection += \"<u></u>\".length;\n    });\n\n    // Set the innerHTML of the editable div\n    if (editableDivRef.current) {\n      editableDivRef.current.innerHTML = updatedText;\n    }\n  };\n\n  // Get caret position in the contentEditable div\n  const getCaretPosition = () => {\n    let position = 0;\n    const selection = window.getSelection();\n    if (selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const preCaretRange = range.cloneRange();\n      preCaretRange.selectNodeContents(editableDivRef.current);\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\n      position = preCaretRange.toString().length;\n    }\n    return position;\n  };\n\n  // Find the word at the caret position\n  const findWordAtCaret = caretPosition => {\n    const words = text.split(/\\s+/);\n    let position = 0;\n    for (let i = 0; i < words.length; i++) {\n      position += words[i].length;\n      if (caretPosition <= position) {\n        return i; // Return the index of the word\n      }\n      position += 1; // Account for space between words\n    }\n    return -1;\n  };\n\n  // Remove underline for the word at the given index\n  const removeUnderlineForWordAt = wordIndex => {\n    if (editableDivRef.current) {\n      const words = editableDivRef.current.innerHTML.split(/\\s+/);\n      if (wordIndex >= 0 && wordIndex < words.length) {\n        // Remove <u> tags from the specific word if it has any\n        words[wordIndex] = words[wordIndex].replace(/<\\/?u>/g, \"\");\n        editableDivRef.current.innerHTML = words.join(\" \");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Grammar Correction Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        spellCheck: false,\n        contentEditable: true,\n        className: \"editable-div\",\n        onInput: handleTextChange // Handle user input\n        ,\n        ref: editableDivRef // Use ref to directly manipulate this div\n        ,\n        placeholder: \"Enter your text here\",\n        style: {\n          width: \"400px\",\n          height: \"150px\",\n          border: \"1px solid #ccc\",\n          padding: \"10px\",\n          fontSize: \"16px\",\n          overflow: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Check Grammar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Corrections\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), corrections && corrections.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: corrections.map((match, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Issue:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this), \" \", match.message, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 55\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Suggestion:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this), \" \", match.replacements.map(r => r.value).join(\", \"), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Offset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this), \" \", match.offset, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Length:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this), \" \", match.length, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Word at Offset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this), \" \", text.substring(match.offset, match.offset + match.length)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No corrections found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/WdApM5J1y0YT2OukCAUANvnU8E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","text","setText","corrections","setCorrections","editableDivRef","handleTextChange","event","caretPosition","getCaretPosition","wordIndex","findWordAtCaret","removeUnderlineForWordAt","target","innerText","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","result","json","matches","length","underlineWordsAtOffsets","updatedText","offsetCorrection","forEach","match","offset","wordToUnderline","substring","underlinedWord","slice","current","innerHTML","position","selection","window","getSelection","rangeCount","range","getRangeAt","preCaretRange","cloneRange","selectNodeContents","setEnd","endContainer","endOffset","toString","words","split","i","replace","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","spellCheck","contentEditable","onInput","ref","placeholder","style","width","height","border","padding","fontSize","overflow","type","map","index","message","replacements","r","value","_c","$RefreshReg$"],"sources":["/Users/tatiana/Documents/code/grammar-correction-tool/frontend/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [corrections, setCorrections] = useState(null);\n  const editableDivRef = useRef(null); // To directly manipulate the contentEditable div\n\n  // Handle text changes\n  const handleTextChange = (event) => {\n    const caretPosition = getCaretPosition(); // Get the caret position\n    const wordIndex = findWordAtCaret(caretPosition); // Find the word at the caret position\n\n    // Remove the underline from the word being edited\n    removeUnderlineForWordAt(wordIndex);\n\n    // Update the text state with the innerText (plain text)\n    setText(event.target.innerText);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const response = await fetch(\"http://127.0.0.1:5000/grammar-check\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ text }),\n    });\n\n    const result = await response.json();\n    setCorrections(result.matches || []);\n  };\n\n  useEffect(() => {\n    if (corrections && corrections.length > 0) {\n      underlineWordsAtOffsets();\n    }\n  }, [corrections]);\n\n  const underlineWordsAtOffsets = () => {\n    let updatedText = text;\n    let offsetCorrection = 0;\n\n    corrections.forEach((match) => {\n      const { offset, length } = match;\n      const wordToUnderline = text.substring(offset, offset + length);\n\n      // Wrap the word in <u> tag\n      const underlinedWord = `<u>${wordToUnderline}</u>`;\n\n      // Update the text by inserting the <u> tag, considering previously added HTML\n      updatedText =\n        updatedText.slice(0, offset + offsetCorrection) +\n        underlinedWord +\n        updatedText.slice(offset + length + offsetCorrection);\n\n      // Adjust the offset correction based on the added <u> tags\n      offsetCorrection += \"<u></u>\".length;\n    });\n\n    // Set the innerHTML of the editable div\n    if (editableDivRef.current) {\n      editableDivRef.current.innerHTML = updatedText;\n    }\n  };\n\n  // Get caret position in the contentEditable div\n  const getCaretPosition = () => {\n    let position = 0;\n    const selection = window.getSelection();\n    if (selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const preCaretRange = range.cloneRange();\n      preCaretRange.selectNodeContents(editableDivRef.current);\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\n      position = preCaretRange.toString().length;\n    }\n    return position;\n  };\n\n  // Find the word at the caret position\n  const findWordAtCaret = (caretPosition) => {\n    const words = text.split(/\\s+/);\n    let position = 0;\n    for (let i = 0; i < words.length; i++) {\n      position += words[i].length;\n      if (caretPosition <= position) {\n        return i; // Return the index of the word\n      }\n      position += 1; // Account for space between words\n    }\n    return -1;\n  };\n\n  // Remove underline for the word at the given index\n  const removeUnderlineForWordAt = (wordIndex) => {\n    if (editableDivRef.current) {\n      const words = editableDivRef.current.innerHTML.split(/\\s+/);\n      if (wordIndex >= 0 && wordIndex < words.length) {\n        // Remove <u> tags from the specific word if it has any\n        words[wordIndex] = words[wordIndex].replace(/<\\/?u>/g, \"\");\n        editableDivRef.current.innerHTML = words.join(\" \");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Grammar Correction Tool</h1>\n      <form onSubmit={handleSubmit}>\n        <div\n          spellCheck={false}\n          contentEditable\n          className=\"editable-div\"\n          onInput={handleTextChange} // Handle user input\n          ref={editableDivRef} // Use ref to directly manipulate this div\n          placeholder=\"Enter your text here\"\n          style={{\n            width: \"400px\",\n            height: \"150px\",\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n            fontSize: \"16px\",\n            overflow: \"auto\",\n          }}\n        />\n        <br />\n        <button type=\"submit\">Check Grammar</button>\n      </form>\n\n      <h2>Corrections</h2>\n      {corrections && corrections.length > 0 ? (\n        <ul>\n          {corrections.map((match, index) => (\n            <li key={index}>\n              <strong>Issue:</strong> {match.message} <br />\n              <strong>Suggestion:</strong> {match.replacements.map((r) => r.value).join(\", \")}\n              <br />\n              <strong>Offset:</strong> {match.offset}\n              <br />\n              <strong>Length:</strong> {match.length}\n              <br />\n              <strong>Word at Offset:</strong> {text.substring(match.offset, match.offset + match.length)}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No corrections found</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}